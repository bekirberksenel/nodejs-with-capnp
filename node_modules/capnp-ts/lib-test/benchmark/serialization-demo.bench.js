"use strict";
/* tslint:disable:no-unsafe-any no-any */
Object.defineProperty(exports, "__esModule", { value: true });
var benchmark_1 = require("benchmark");
var fs_1 = require("fs");
var path = require("path");
var capnp = require("../../lib");
var util_1 = require("../../lib/util");
var serialization_demo_1 = require("../integration/serialization-demo");
var util_2 = require("../util");
var jsonBuffer = new Uint8Array(util_2.readFileBuffer("test/data/serialization-demo.json"));
var jsonString = fs_1.readFileSync(path.join(__dirname, "../../", "test/data/serialization-demo.json"), "utf-8");
var messageData = util_2.readFileBuffer("test/data/serialization-demo.bin");
// Let's preprocess it so we have just the raw segment data.
var messageSegment = new capnp.Message(messageData).getSegment(0).buffer;
var deeplyNested = new benchmark_1.Suite("iteration over deeply nested lists")
    .add("JSON.parse(decodeUtf8(m))", function () {
    var addressBook = JSON.parse(util_1.decodeUtf8(jsonBuffer));
    addressBook.people.forEach(function (person) {
        person.phones.forEach(function (phone) {
            phone.number.toUpperCase();
        });
    });
})
    .add("JSON.parse(m)", function () {
    var addressBook = JSON.parse(jsonString);
    addressBook.people.forEach(function (person) {
        person.phones.forEach(function (phone) {
            phone.number.toUpperCase();
        });
    });
})
    .add("capnp.Message(m)", function () {
    var message = new capnp.Message(messageSegment, false, true);
    var addressBook = message.getRoot(serialization_demo_1.AddressBook);
    addressBook.getPeople().forEach(function (person) {
        person.getPhones().forEach(function (phone) {
            phone.getNumber().toUpperCase();
        });
    });
});
var listLength = new benchmark_1.Suite("top level list length access")
    .add("JSON.parse(decodeUtf8(m))", function () {
    var addressBook = JSON.parse(util_1.decodeUtf8(jsonBuffer));
    addressBook.people.length.toFixed(0);
})
    .add("JSON.parse(m)", function () {
    var addressBook = JSON.parse(jsonString);
    addressBook.people.length.toFixed(0);
})
    .add("capnp.Message(m)", function () {
    var message = new capnp.Message(messageSegment, false, true);
    var addressBook = message.getRoot(serialization_demo_1.AddressBook);
    addressBook
        .getPeople()
        .getLength()
        .toFixed(0);
});
var parse = new benchmark_1.Suite('"parse"')
    .add("JSON.parse(decodeUtf8(m))", function () {
    JSON.parse(util_1.decodeUtf8(jsonBuffer));
})
    .add("JSON.parse(m)", function () {
    JSON.parse(jsonString);
})
    .add("capnp.Message(m).getRoot(A)", function () {
    // Okay, this isn't fair. Cap'n Proto only does "parsing" at access time. :)
    new capnp.Message(messageSegment, false, true).getRoot(serialization_demo_1.AddressBook);
});
util_2.logBench(deeplyNested).run();
util_2.logBench(listLength).run();
util_2.logBench(parse).run();

//# sourceMappingURL=serialization-demo.bench.js.map
