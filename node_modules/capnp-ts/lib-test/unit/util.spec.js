"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testcheck_1 = require("testcheck");
var C = require("../../lib/constants");
var errors_1 = require("../../lib/errors");
var util = require("../../lib/util");
var util_1 = require("../util");
var BAD_UTF8 = [
    new Uint8Array([0xff, 0xff]),
    new Uint8Array([0xf4, 0xaf, 0x92, 0xa9]),
    new Uint8Array([0xc3]),
    new Uint8Array([0xe0]),
    new Uint8Array([0xe0, 0xbc]),
    new Uint8Array([0xf0]),
    new Uint8Array([0xf0, 0x9f]),
    new Uint8Array([0xf0, 0x9f, 0x92])
];
var UTF8_BUFFERS = [
    { buf: new Uint8Array([0x21]), str: "!" },
    { buf: new Uint8Array([0xc3, 0xad]), str: "Ã­" },
    { buf: new Uint8Array([0xe0, 0xbc, 0x80]), str: "à¼€" },
    { buf: new Uint8Array([0xf0, 0x9f, 0x92, 0xa9]), str: "ðŸ’©" }
];
util_1.tap.test("bufferToHex()", function (t) {
    t.equal(util.bufferToHex(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd]).buffer), "[aa bb cc dd]");
    t.end();
});
util_1.tap.test("checkInt32()", function (t) {
    t.throws(function () { return util.checkInt32(0xffffffff); });
    t.throws(function () { return util.checkInt32(-0xffffffff); });
    t.doesNotThrow(function () { return util.checkInt32(0x7fffffff); });
    t.doesNotThrow(function () { return util.checkInt32(-0x7fffffff); });
    t.end();
});
util_1.tap.test("checkUint32()", function (t) {
    t.throws(function () { return util.checkUint32(0xffffffff + 1); });
    t.throws(function () { return util.checkUint32(-1); });
    t.doesNotThrow(function () { return util.checkUint32(0xffffffff); });
    t.doesNotThrow(function () { return util.checkUint32(0); });
    t.end();
});
util_1.tap.test("decodeUtf8()", function (t) {
    UTF8_BUFFERS.forEach(function (_a) {
        var buf = _a.buf, str = _a.str;
        t.equal(util.decodeUtf8(buf), str);
    });
    BAD_UTF8.forEach(function (b) {
        t.throws(function () { return util.decodeUtf8(b); }, new RangeError(errors_1.RANGE_INVALID_UTF8));
    });
    t.end();
});
util_1.tap.test("decodeUtf8(encodeUtf8())", function (t) {
    util_1.runTestCheck(t, testcheck_1.property(testcheck_1.gen.string, function (s) { return util.decodeUtf8(util.encodeUtf8(s)) === s; }), { numTests: 1000 });
    t.end();
});
util_1.tap.test("dumpBuffer()", function (t) {
    var buf1 = new Uint8Array(64);
    // Gratuitous? Yes. Awesome? Yes.
    for (var i = 0; i < 11; i++)
        buf1[i + 1] = "Cap'n Proto".charCodeAt(i);
    for (var i = 0; i < 11; i++)
        buf1[i + 19] = "Cap'n Proto".charCodeAt(i);
    buf1[0x10] = 0x11;
    buf1[0x11] = 0x05;
    t.equal(util.dumpBuffer(buf1), "\n=== buffer[64] ===\n00000000: 00 43 61 70 27 6e 20 50  72 6f 74 6f 00 00 00 00    \u00B7Cap'n Proto\u00B7\u00B7\u00B7\u00B7\n00000010: 11 05 00 43 61 70 27 6e  20 50 72 6f 74 6f 00 00    \u00B7\u00B7\u00B7Cap'n Proto\u00B7\u00B7\n00000020: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    \u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\n00000030: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    \u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\n");
    var buf2Length = C.MAX_BUFFER_DUMP_BYTES + 16;
    var buf2 = new Uint8Array(buf2Length);
    var buf2Wanted = "\n=== buffer[" + C.MAX_BUFFER_DUMP_BYTES + "] ===";
    for (var i = 0; i < C.MAX_BUFFER_DUMP_BYTES / 16; i++) {
        buf2Wanted += "\n" + util.pad((i * 16).toString(16), 8) + ": 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    \u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7\u00B7";
    }
    buf2Wanted += "\n=== (truncated 16 bytes) ===\n";
    t.equal(util.dumpBuffer(buf2), buf2Wanted);
    t.equal(util.dumpBuffer(buf2.buffer), buf2Wanted);
    t.end();
});
util_1.tap.test("encodeUtf8()", function (t) {
    UTF8_BUFFERS.forEach(function (_a) {
        // The output buffer might be longer than its contents so we need to slice it.
        var buf = _a.buf, str = _a.str;
        var out = util.encodeUtf8(str);
        util_1.compareBuffers(t, out.buffer.slice(0, out.byteLength), buf.buffer);
    });
    t.end();
});
util_1.tap.test("format()", function (t) {
    t.equal(util.format("%a", 0x0da0beef), "0x0da0beef");
    t.equal(util.format("%b", 170), "10101010");
    t.equal(util.format("%c", 33), "!");
    t.equal(util.format("%c", "!"), "!");
    t.equal(util.format("%d", 777), "777");
    t.equal(util.format("%f", 777.777777), "777.777777");
    t.equal(util.format("%.2f", 0.771), ".77");
    t.equal(util.format("%0.3f", 0.7777), "0.778");
    t.equal(util.format("%j", { a: "b" }), '{"a":"b"}');
    t.equal(util.format("%o", parseInt("777", 8)), "0777");
    t.equal(util.format("%s", { toString: function () { return "test"; } }), "test");
    t.equal(util.format("%x", 0x0badbeef), "0xbadbeef");
    t.equal(util.format("%X", 0x0badbeef), "0xBADBEEF");
    t.equal(util.format("%z", "verbatim"), "z");
    t.equal(util.format("hi"), "hi");
    t.end();
});
util_1.tap.test("identity()", function (t) {
    t.equal(util.identity("x"), "x");
    t.end();
});
util_1.tap.test("pad()", function (t) {
    t.equal(util.pad("0", 8), "00000000");
    t.equal(util.pad("0", 8, "="), "=======0");
    t.equal(util.pad("000000000", 8), "000000000");
    t.end();
});
util_1.tap.test("padToWord()", function (t) {
    t.equal(util.padToWord(7), 8);
    t.equal(util.padToWord(0), 0);
    t.equal(util.padToWord(9), 16);
    t.end();
});
util_1.tap.test("repeat()", function (t) {
    t.equal(util.repeat(10, "0"), "0000000000");
    t.equal(util.repeat(0, "x"), "");
    t.equal(util.repeat(-1, "z"), "");
    t.end();
});

//# sourceMappingURL=util.spec.js.map
