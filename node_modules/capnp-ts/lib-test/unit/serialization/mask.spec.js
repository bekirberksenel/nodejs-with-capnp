"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../../../lib/constants");
var mask_1 = require("../../../lib/serialization/mask");
var types_1 = require("../../../lib/types");
var util_1 = require("../../util");
var BIT_MASKS = [
    { mask: [0], bitOffset: 5, val: false },
    { mask: [32], bitOffset: 5, val: true },
    { mask: [1], bitOffset: 0, val: true },
    { mask: [32], bitOffset: 13, val: true }
];
var FLOAT_32_MASKS = [
    { mask: [0x00, 0x00, 0x00, 0x00], val: 0 },
    { mask: [0xdb, 0x0f, 0x49, 0x40], val: Math.PI },
    { mask: [0x00, 0x00, 0xc0, 0x7f], val: NaN },
    { mask: [0x00, 0x00, 0x80, 0x7f], val: Infinity },
    { mask: [0x00, 0x00, 0x80, 0xff], val: -Infinity },
    { mask: [0x00, 0x00, 0x20, 0x41], val: 10 }
];
var FLOAT_64_MASKS = [
    { mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], val: 0 },
    { mask: [0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40], val: Math.PI },
    { mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f], val: NaN },
    { mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f], val: Infinity },
    { mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff], val: -Infinity },
    { mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40], val: 10 }
];
var INT_16_MASKS = [
    { mask: [0x00, 0x00], val: 0x0000 },
    { mask: [0x78, 0x56], val: 0x5678 },
    { mask: [0x00, 0x80], val: -0x8000 },
    { mask: [0xff, 0x7f], val: 0x7fff },
    { mask: [0xff, 0xff], val: -0x0001 },
    // Testing overflow behavior.
    { mask: [0xff, 0xff], val: 0xffff },
    { mask: [0x00, 0x80], val: 0x8000 },
    { mask: [0x21, 0x22], val: 0xfffffffff + 0x2222 }
];
var INT_32_MASKS = [
    { mask: [0x00, 0x00, 0x00, 0x00], val: 0x00000000 },
    { mask: [0x67, 0x45, 0x23, 0x01], val: 0x01234567 },
    { mask: [0x00, 0x00, 0x00, 0x80], val: -0x80000000 },
    { mask: [0xff, 0xff, 0xff, 0x7f], val: 0x7fffffff },
    { mask: [0xff, 0xff, 0xff, 0xff], val: -0x00000001 },
    // Testing overflow behavior.
    { mask: [0xff, 0xff, 0xff, 0xff], val: 0xffffffff },
    { mask: [0x00, 0x00, 0x00, 0x80], val: 0x80000000 },
    { mask: [0x21, 0x22, 0x00, 0x00], val: 0xfffffffff + 0x2222 }
];
var INT_64_MASKS = [
    {
        mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        val: 0x0000000000000000
    },
    {
        mask: [0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x00],
        val: 0x00123456789abcde
    },
    {
        mask: [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff],
        val: constants_1.MIN_SAFE_INTEGER
    },
    {
        mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00],
        val: constants_1.MAX_SAFE_INTEGER
    },
    {
        mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        val: -0x0000000000000001
    }
];
var INT_8_MASKS = [
    { mask: [0x00], val: 0x00 },
    { mask: [0x78], val: 0x78 },
    { mask: [0x80], val: -0x80 },
    { mask: [0x7f], val: 0x7f },
    { mask: [0xff], val: -0x01 },
    // Testing overflow behavior.
    { mask: [0xff], val: 0xff },
    { mask: [0x80], val: 0x80 },
    { mask: [0x21], val: 0xfffffffff + 0x22 }
];
var UINT_16_MASKS = [
    { mask: [0x00, 0x00], val: 0x0000 },
    { mask: [0x78, 0x56], val: 0x5678 },
    { mask: [0xff, 0xff], val: 0xffff },
    { mask: [0xff, 0x7f], val: 0x7fff },
    { mask: [0x00, 0x80], val: 0x8000 },
    // Testing overflow behavior.
    { mask: [0xff, 0xff], val: -0x0001 },
    { mask: [0x00, 0x80], val: -0x8000 },
    { mask: [0x21, 0x22], val: 0xfffffffff + 0x2222 }
];
var UINT_32_MASKS = [
    { mask: [0x00, 0x00, 0x00, 0x00], val: 0x00000000 },
    { mask: [0x78, 0x56, 0x34, 0x12], val: 0x12345678 },
    { mask: [0xff, 0xff, 0xff, 0x7f], val: 0x7fffffff },
    { mask: [0xff, 0xff, 0xff, 0xff], val: 0xffffffff },
    { mask: [0x00, 0x00, 0x00, 0x80], val: 0x80000000 },
    // Testing overflow behavior.
    { mask: [0x00, 0x00, 0x00, 0x80], val: -0x80000000 },
    { mask: [0xff, 0xff, 0xff, 0xff], val: -0x00000001 },
    { mask: [0x21, 0x22, 0x00, 0x00], val: 0xfffffffff + 0x00002222 }
];
var UINT_64_MASKS = [
    {
        mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        val: 0x0000000000000000
    },
    {
        mask: [0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x00],
        val: 0x00123456789abcde
    },
    {
        mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00],
        val: constants_1.MAX_SAFE_INTEGER
    },
    // Negative numbers are negated.
    {
        mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00],
        val: constants_1.MIN_SAFE_INTEGER
    },
    {
        mask: [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        val: -0x0000000000000001
    }
];
var UINT_8_MASKS = [
    { mask: [0x00], val: 0x00 },
    { mask: [0x78], val: 0x78 },
    { mask: [0x7f], val: 0x7f },
    { mask: [0xff], val: 0xff },
    { mask: [0x80], val: 0x80 },
    // Testing overflow behavior.
    { mask: [0x80], val: -0x80 },
    { mask: [0xff], val: -0x01 },
    { mask: [0x21], val: 0xfffffffff + 0x2222 }
];
function makeMaskTest(name, fn, testData) {
    util_1.tap.test(name, function (t) {
        testData.forEach(function (_a) {
            var mask = _a.mask, val = _a.val;
            util_1.compareBuffers(t, fn(val).buffer, new Uint8Array(mask).buffer);
        });
        t.end();
    });
}
util_1.tap.test("getBitMask()", function (t) {
    BIT_MASKS.forEach(function (_a) {
        var bitOffset = _a.bitOffset, mask = _a.mask, val = _a.val;
        util_1.compareBuffers(t, mask_1.getBitMask(val, bitOffset).buffer, new Uint8Array(mask).buffer);
    });
    t.end();
});
util_1.tap.test("getInt64Mask()", function (t) {
    INT_64_MASKS.forEach(function (_a) {
        var mask = _a.mask, val = _a.val;
        util_1.compareBuffers(t, mask_1.getInt64Mask(types_1.Int64.fromNumber(val)).buffer, new Uint8Array(mask).buffer);
    });
    t.end();
});
util_1.tap.test("getUint64Mask()", function (t) {
    UINT_64_MASKS.forEach(function (_a) {
        var mask = _a.mask, val = _a.val;
        util_1.compareBuffers(t, mask_1.getUint64Mask(types_1.Uint64.fromNumber(val)).buffer, new Uint8Array(mask).buffer);
    });
    t.end();
});
makeMaskTest("getFloat32Mask()", mask_1.getFloat32Mask, FLOAT_32_MASKS);
makeMaskTest("getFloat64Mask()", mask_1.getFloat64Mask, FLOAT_64_MASKS);
makeMaskTest("getInt16Mask()", mask_1.getInt16Mask, INT_16_MASKS);
makeMaskTest("getInt32Mask()", mask_1.getInt32Mask, INT_32_MASKS);
makeMaskTest("getInt8Mask()", mask_1.getInt8Mask, INT_8_MASKS);
makeMaskTest("getUint16Mask()", mask_1.getUint16Mask, UINT_16_MASKS);
makeMaskTest("getUint32Mask()", mask_1.getUint32Mask, UINT_32_MASKS);
makeMaskTest("getUint8Mask()", mask_1.getUint8Mask, UINT_8_MASKS);

//# sourceMappingURL=mask.spec.js.map
