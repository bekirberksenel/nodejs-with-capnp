"use strict";
/**
 * @author jdiaz5513
 */
Object.defineProperty(exports, "__esModule", { value: true });
var capnp = require("../../lib");
var util_1 = require("../util");
var serialization_demo_1 = require("./serialization-demo");
var SERIALIZATION_DEMO = util_1.readFileBuffer("test/data/serialization-demo.bin");
util_1.tap.test("write address book", function (t) {
    var message = new capnp.Message();
    var addressBook = message.initRoot(serialization_demo_1.AddressBook);
    t.type(addressBook, serialization_demo_1.AddressBook);
    var people = addressBook.initPeople(2);
    t.type(people, serialization_demo_1.AddressBook.People);
    var alice = people.get(0);
    t.type(alice, serialization_demo_1.Person);
    alice.setId(456);
    alice.setName("Alice");
    alice.setEmail("alice@example.com");
    t.comment("should not crash while calling setters");
    var alicePhones = alice.initPhones(1);
    t.type(alicePhones, serialization_demo_1.Person.Phones);
    alicePhones.get(0).setNumber("555-1212");
    alicePhones.get(0).setType(serialization_demo_1.Person.PhoneNumber.Type.MOBILE);
    t.comment("should not crash while chaining getter calls");
    alice.getEmployment().setSchool("MIT");
    t.comment("should not crash while accessing groups and unions");
    var bob = people.get(1);
    t.type(bob, serialization_demo_1.Person);
    bob.setId(456);
    bob.setName("Bob");
    bob.setEmail("bob@example.com");
    t.comment("should not crash while calling setters on composite struct with nonzero index");
    var bobPhones = bob.initPhones(2);
    t.type(bobPhones, serialization_demo_1.Person.Phones);
    bobPhones.get(0).setNumber("555-4567");
    bobPhones.get(0).setType(serialization_demo_1.Person.PhoneNumber.Type.HOME);
    bobPhones.get(1).setNumber("555-7654");
    bobPhones.get(1).setType(serialization_demo_1.Person.PhoneNumber.Type.WORK);
    t.comment("should not crash while chaining getters");
    bob.getEmployment().setUnemployed();
    t.comment("should not crash while setting void union");
    var out = message.toArrayBuffer();
    util_1.compareBuffers(t, out, SERIALIZATION_DEMO);
    t.end();
});
util_1.tap.test("read address book", function (t) {
    var message = new capnp.Message(SERIALIZATION_DEMO, false);
    var addressBook = message.getRoot(serialization_demo_1.AddressBook);
    var people = addressBook.getPeople();
    t.equal(people.getLength(), 2);
    var alice = people.get(0);
    t.equal(alice.getId(), 456);
    t.equal(alice.getName(), "Alice");
    t.equal(alice.getEmail(), "alice@example.com");
    var alicePhones = alice.getPhones();
    t.equal(alicePhones.getLength(), 1);
    t.equal(alicePhones.get(0).getNumber(), "555-1212");
    t.equal(alicePhones.get(0).getType(), serialization_demo_1.Person.PhoneNumber.Type.MOBILE);
    var aliceEmployment = alice.getEmployment();
    t.equal(aliceEmployment.which(), serialization_demo_1.Person.Employment.SCHOOL);
    t.ok(aliceEmployment.isSchool());
    t.equal(aliceEmployment.getSchool(), "MIT");
    var bob = people.get(1);
    t.equal(bob.getId(), 456);
    t.equal(bob.getName(), "Bob");
    t.equal(bob.getEmail(), "bob@example.com");
    var bobPhones = bob.getPhones();
    t.equal(bobPhones.getLength(), 2);
    t.equal(bobPhones.get(0).getNumber(), "555-4567");
    t.equal(bobPhones.get(0).getType(), serialization_demo_1.Person.PhoneNumber.Type.HOME);
    t.equal(bobPhones.get(1).getNumber(), "555-7654");
    t.equal(bobPhones.get(1).getType(), serialization_demo_1.Person.PhoneNumber.Type.WORK);
    var bobEmployment = bob.getEmployment();
    t.equal(bobEmployment.which(), serialization_demo_1.Person.Employment.UNEMPLOYED);
    t.ok(bobEmployment.isUnemployed());
    t.end();
});
util_1.tap.test("copy pointers from other message", function (t) {
    var message1 = new capnp.Message();
    var addressBook1 = message1.initRoot(serialization_demo_1.AddressBook);
    var people1 = addressBook1.initPeople(2);
    var alice1 = people1.get(1);
    alice1.setName("Alice");
    alice1.setEmail("alice@example.com");
    alice1.setId(456);
    var message2 = new capnp.Message();
    var addressBook2 = message2.initRoot(serialization_demo_1.AddressBook);
    addressBook2.setPeople(people1);
    var people2 = addressBook2.getPeople();
    var alice2 = people2.get(1);
    t.equal(people2.getLength(), 2);
    t.equal(alice2.getName(), "Alice");
    t.equal(alice2.getEmail(), "alice@example.com");
    t.equal(alice2.getId(), 456);
    t.end();
});
util_1.tap.test("adoption", function (t) {
    var m = new capnp.Message();
    var s = m.getSegment(0);
    var addressBook = m.initRoot(serialization_demo_1.AddressBook);
    var people1 = addressBook.initPeople(1);
    var alice1 = people1.get(0);
    alice1.setName("Alice");
    alice1.setEmail("alice@example.com");
    alice1.setId(456);
    var o = addressBook.disownPeople();
    t.ok(s.isWordZero(0x08), "should null the pointer");
    t.notOk(s.isWordZero(0x10), "should not wipe out the composite list tag word");
    t.notOk(s.isWordZero(0x40), "should not touch the content");
    t.ok(capnp.Pointer.isNull(people1), "should null the original pointer");
    addressBook.adoptPeople(o);
    var people2 = addressBook.getPeople();
    var alice2 = people2.get(0);
    t.equal(alice2.getName(), "Alice");
    t.equal(alice2.getEmail(), "alice@example.com");
    t.equal(alice2.getId(), 456);
    t.equal(alice1.getId(), 456);
    t.throws(function () { return addressBook.adoptPeople(o); }, undefined, "should not allow multiple adoption");
    t.end();
});
util_1.tap.test("overwrite", function (t) {
    var m = new capnp.Message();
    var s = m.getSegment(0);
    var addressBook = m.initRoot(serialization_demo_1.AddressBook);
    var alice = addressBook.initPeople(1).get(0);
    alice.setName("Alex");
    alice.setName("Alice");
    t.ok(s.isWordZero(0x40), "should zero out the old string");
    addressBook.initPeople(1);
    t.ok(s.isWordZero(0x40), "should zero out every string");
    t.ok(s.isWordZero(0x48), "should zero out every string");
    t.end();
});

//# sourceMappingURL=serialization-demo.spec.js.map
